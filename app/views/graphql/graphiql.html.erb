<!--
 *  Copyright (c) 2021 GraphQL Contributors
 *  All rights reserved.
 *
 *  This source code is licensed under the license found in the
 *  LICENSE file in the root directory of this source tree.
-->
<!doctype html>
<html lang="en">
<head>
  <title>GraphiQL</title>
  <%= csrf_meta_tags %>
  <style>
      body {
          height: 100%;
          margin: 0;
          width: 100%;
          overflow: hidden;
      }

      #graphiql {
          height: 100vh;
      }
  </style>
  <!--
    This GraphiQL example depends on Promise and fetch, which are available in
    modern browsers, but can be "polyfilled" for older browsers.
    GraphiQL itself depends on React DOM.
    If you do not want to rely on a CDN, you can host these files locally or
    include them directly in your favored resource bundler.
  -->
  <script
    crossorigin
    src="https://unpkg.com/react@18/umd/react.production.min.js"
  ></script>
  <script
    crossorigin
    src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"
  ></script>
  <!--
    These two files can be found in the npm module, however you may wish to
    copy them directly into your environment, or perhaps include them in your
    favored resource bundler.
   -->
  <script
    src="https://unpkg.com/graphiql/graphiql.min.js"
    type="application/javascript"
  ></script>
  <link rel="stylesheet" href="https://unpkg.com/graphiql/graphiql.min.css" />
  <!--
    These are imports for the GraphIQL Explorer plugin.
   -->
  <script
    src="https://unpkg.com/@graphiql/plugin-explorer/dist/index.umd.js"
    crossorigin
  ></script>

  <link
    rel="stylesheet"
    href="https://unpkg.com/@graphiql/plugin-explorer/dist/style.css"
    />
</head>

<body>
<div id="graphiql">Loading...</div>
<template id="default-query">
# Welcome to govuk-graphql
#
# This is a GraphQL API for GOV.UK content. It mirrors the structure
# of content-store responses, but resolves queries dynamically instead
# of doing link expansion at publish time.
#
# The query below is an example of how you can query for the GOV.UK
# homepage, including the level_one_taxons (which we can find by following
# their "root_taxon" link in reverse, as the homepage is the root taxon),
# and popular_links, which are regular links from the homepage.
#
# There's a content-store shim available at /api/content which should return
# more or less the same responses as the live content-store.
#
# You can see get the queries this uses at /queries/#{schema_name}. For example:
# - /query/homepage
# - /query/ministers_index
# - /query/guide
#
# Have fun!

query {
  edition(base_path: "/") {
    analytics_identifier
    base_path
    content_id
    description
    details {
      body
    }
    document_type
    first_published_at

    links {
      level_one_taxons: links_of_type(type: "root_taxon", reverse: true) {
        base_path
        content_id
        document_type
      }
      popular_links: links_of_type(type: "popular_links") {
        base_path
        title
        document_type
      }
    }

    phase
    public_updated_at
    publishing_app
    publishing_request_id
    rendering_app
    schema_name
    title
    updated_at
  }
}
</template>
<script>
    const root = ReactDOM.createRoot(document.getElementById('graphiql'));
    const fetcher = GraphiQL.createFetcher({
        url: '/graphql?pp=async-flamegraph',
        headers: {
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content,
        },
    });
    const explorerPlugin = GraphiQLPluginExplorer.explorerPlugin();
    const defaultQuery = document.getElementById('default-query').innerHTML.trim();
    root.render(
        React.createElement(GraphiQL, {
            fetcher,
            defaultEditorToolsVisibility: true,
            plugins: [explorerPlugin],
            defaultQuery: defaultQuery,
        }),
    );
</script>
</body>
</html>
